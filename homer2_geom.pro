; homer2_geom.pro; by abinadab dieter / adieter@mail.utexas.edu; code for handling the coil geometry; creates structures for holding all the coil parameters;----------------------------------------------------------------------------------function init_geom_rect,result,rectparam	; this function places all the rectangular loops	; rectparam is the physical properties of each loop (height, width, current, etc)	; the orientation and position of all the loops is stored in result	; in principle, the loop structures can easily accomodate arbitrary	; loops, but for now we just needed to have identical coils equally spaced	; in toroidal angle 		; create the prototype structure	single = {rloop}			; how many loops do you want?	nrects = rectparam.n		; decided not to have any	if nrects eq 0 then begin		result = 0		return,0	endif			; create structure to hold all the loops	result = replicate(single,nrects)		; in this simple example, the loops are	; arranged equally around in a circular pattern	phi = 0	; angular separation	dphi = 2*!DPI / nrects		; set the parameters which won't change from loop to loop	rcenter = rectparam.c		height = rectparam.h	width = rectparam.w	j = rectparam.j		; go through each loop individually	for i=0,nrects-1 do begin		; place each loop at the correct angle and center		pos = {vector,rcenter*cos(phi),rcenter*sin(phi),0}		; find the unit vector normal to the plane of the loop		zhat = {vector,0,0,1}		rhat = unit(pos)		normal = cross(zhat,rhat)						; store each loop in the multiloop structure		result[i] = {rloop,height,width,pos,normal,j,0}		; advance the angle for the next loop		phi = phi + dphi	endfor	; returns the number of rectangulat coils created	return,nrectsend;----------------------------------------------------------------------------------function init_geom_circ,result,circparam	; this routine puts the circular loops in the right place		; set up the prototype structure	single = {cloop}	; number of circular loops	ncircs = circparam.n	if ncircs eq 0 then begin		result = 0		return,0	endif		height = circparam.h	radius = circparam.r	j = circparam.j		; multiloop structure to hold all the loops	result = replicate(single,ncircs)		; go through and set each loop to have the properties	; specified by the height, radius, and current arrays	for i=0,ncircs-1 do begin		pos = {vector,0,0,height[i]}		; these loops always have their normal		; pointed straight up		normal = {vector,0,0,1}		result[i] = {cloop,radius[i],pos,normal,j[i]}	endfor	return,ncircsend;----------------------------------------------------------------------------------pro init_geometry,geom,rectparam,circparam	; sets up both the rectangular and circular loops	nr = init_geom_rect(rectangles,rectparam)	nc = init_geom_circ(circles,circparam)		; create big structure to hold all loops	geom = {nrects:nr,rect:rectangles,ncircs:nc,circ:circles}	geom.rect = rectangles	geom.circ = circlesend;----------------------------------------------------------------------------------pro init_param,rn,rh,rw,rc,rj,cn,ch,cr,cj,rectparam,circparam	; this procedure just moves data from place to another	; I thought it would help simplify the total initialization	; process	rectparam = {n:rn,h:rh,w:rw,c:rc,j:rj}	circparam = {n:cn,h:ch,r:cr,j:cj}end;----------------------------------------------------------------------------------pro fast_init_param,rectparam,circparam	; just temporary hardcoding of typical parameters		; number of rectangular loops	rn = 16	; loop height	rh = 2.375	; loop width	rw = 1.17	; radius of center of loops	rc = 1.3	; current in each loop	rj = 4.4E4	; number of circular loops	cn = 3	; heights	ch = [-1,0,1]	; radii	cr = [2,2,2]	; currents	cj = [400,0,400]	init_param,rn,rh,rw,rc,rj,cn,ch,cr,cj,rectparam,circparamend;----------------------------------------------------------------------------------pro fast_init_geometry,geom	; initialize each separately	fast_init_param,rectparam,circparam	init_geometry,geom,rectparam,circparamend;----------------------------------------------------------------------------------pro single_loop,geom	rn = 1	cn = 0		rh = 2.375	rw = 1.17	rc = 1.3	rj = 44E3	ch = [-1,0,1]	cr = [2,2,2]	cj = [1350,544,1350]	init_param,rn,rh,rw,rc,rj,cn,ch,cr,cj,rectparam,circparam	init_geometry,geom,rectparam,circparamend;-----------------------------; create loop structures	declare = {rloop,height:0.0,width:0.0,center:{vector},nhat:{vector},j:0.0,theta:0.0}	declare = {cloop,radius:0.0,center:{vector},nhat:{vector},j:0.0}end